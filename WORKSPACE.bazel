workspace(
    name = "blade",
)

load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")

################################################
# Make sure we are pulling a recent skylib
################################################
http_archive(
    name = "bazel_skylib",
    sha256 = "f7be3474d42aae265405a592bb7da8e171919d74c16f082a5457840f06054728",
    urls = [
        "https://mirror.bazel.build/github.com/bazelbuild/bazel-skylib/releases/download/1.2.1/bazel-skylib-1.2.1.tar.gz",
        "https://github.com/bazelbuild/bazel-skylib/releases/download/1.2.1/bazel-skylib-1.2.1.tar.gz",
    ],
)

http_archive(
    name = "io_tweag_rules_nixpkgs",
    sha256 = "3cd7a8fa957b58a64e4b5a1c15c072ff672747d32b120e12e4e9534ad8650c5c",
    strip_prefix = "rules_nixpkgs-98daf39280f21ce0ee8086543b00a65a1a4bf621",
    urls = ["https://github.com/tweag/rules_nixpkgs/archive/98daf39280f21ce0ee8086543b00a65a1a4bf621.tar.gz"],
)

http_archive(
    name = "rules_rust",
    # rules_rust 0.22.0 does not yet support direct
    # overriding toolchain used for build of cargo-bazel
    # binary.
    # On non-standard systems (viz. NixOS), that approach
    # results in download of 'broken' rustc which then
    # cannot build cargo bazel.
    # This patch fixes the issue, allowing for toolchain
    # specification.
    #
    # Note: This should be removed as soon as
    # issue in rules_rust is resolved.
    patches = [
        "//third_party/rust/patches/rules_rust:001-rules-rust-crate-universe.patch",
    ],
    sha256 = "9d04e658878d23f4b00163a72da3db03ddb451273eb347df7d7c50838d698f49",
    urls = ["https://github.com/bazelbuild/rules_rust/releases/download/0.26.0/rules_rust-v0.26.0.tar.gz"],
)

load("@io_tweag_rules_nixpkgs//nixpkgs:repositories.bzl", "rules_nixpkgs_dependencies")

rules_nixpkgs_dependencies()

load("@io_tweag_rules_nixpkgs//nixpkgs:nixpkgs.bzl", "nixpkgs_local_repository", "nixpkgs_cc_configure")

# It is recommended to keep nixpkgs of nix-shell (which provide Bazel),
# and nixpkgs of Bazel Workspace in sync - otherwise one may
# got hit with nasty glibc mismatch errors.
nixpkgs_local_repository(
    name = "nixpkgs",
    nix_file_deps = ["//:flake.lock"],
    nix_flake_lock_file = "//:flake.lock",
)

# rules_rust also uses the cc compiler
nixpkgs_cc_configure(
    name = "nixpkgs_config_cc",
    nix_file = "//nix/cc:cc.nix",
    repository = "@nixpkgs",
)


# load rules_cc
http_archive(
    name = "rules_cc",
    sha256 = "4dccbfd22c0def164c8f47458bd50e0c7148f3d92002cdb459c2a96a68498241",
    urls = ["https://github.com/bazelbuild/rules_cc/releases/download/0.0.1/rules_cc-0.0.1.tar.gz"],
)

load("@rules_cc//cc:repositories.bzl", "rules_cc_dependencies", "rules_cc_toolchains")

rules_cc_dependencies()

rules_cc_toolchains()

load("@io_tweag_rules_nixpkgs//nixpkgs:toolchains/rust.bzl", "nixpkgs_rust_configure")

nixpkgs_rust_configure(
    name = "nix_rust",
    default_edition = "2021",
    repository = "@nixpkgs",
    nix_file_deps = ["//:flake.lock"],
)

load("@rules_rust//rust:repositories.bzl", "rust_repositories", "rust_analyzer_toolchain_repository")

rust_repositories()

# crate_universe as a way of governing deps
load("@rules_rust//crate_universe:repositories.bzl", "crate_universe_dependencies")

crate_universe_dependencies(
    bootstrap = True,
    rust_toolchain_cargo_template = "@nix_rust//:bin/{tool}",
    rust_toolchain_rustc_template = "@nix_rust//:bin/{tool}",
)

load("//third_party/nix:deps.bzl", "third_party_nix_deps")
third_party_nix_deps()

load("//third_party/rust:deps.bzl", "rust_dependencies")
rust_dependencies()

load("@crate//:defs.bzl", "crate_repositories")
crate_repositories()
load("@wasm_crate//:defs.bzl", wasm_create_repositories = "crate_repositories")
wasm_create_repositories()


load("@rules_rust//tools/rust_analyzer:deps.bzl", "rust_analyzer_dependencies")

rust_analyzer_dependencies()

register_toolchains(rust_analyzer_toolchain_repository(
    name = "rust_analyzer_toolchain",
    # Run rustc --version
    version = "1.69.0",
))

load("@rules_rust//wasm_bindgen:repositories.bzl", "rust_wasm_bindgen_repositories", "rust_wasm_bindgen_dependencies")

rust_wasm_bindgen_repositories()

rust_wasm_bindgen_dependencies()

register_toolchains("//nix/rust:wasm_bindgen_toolchain")
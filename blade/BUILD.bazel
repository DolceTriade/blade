load("@rules_oci//oci:defs.bzl", "oci_image", "oci_push", "oci_load")
load("@rules_pkg//:pkg.bzl", "pkg_tar")
load("@rules_rust//rust:defs.bzl", "rust_binary", "rust_shared_library", "rust_test")
load("//nix/bazel:runfiles.bzl", "runfiles")

rust_binary(
    name = "blade",
    srcs = [
        "admin.rs",
        "lib.rs",
        "main.rs",
        "routes.rs",
        "darkmode.rs",
    ] + glob([
        "routes/**/*.rs",
        "components/**/*.rs",
    ]),
    crate_features = ["ssr"],
    data = [
        "leptos.toml",
        "//blade/static",
    ],
    rustc_env = {
        "SERVER_FN_OVERRIDE_KEY": "bazel",
    },
    deps = [
        "//blade/bep",
        "//blade/bytestream",
        "//blade/db",
        "//blade/memdump",
        "//blade/metrics",
        "//blade/state",
        "//blade/tailwindmerge",
        "@crate//:actix-files",
        "@crate//:actix-web",
        "@crate//:ansi-to-html",
        "@crate//:anyhow",
        "@crate//:broadcaster",
        "@crate//:cfg-if",
        "@crate//:clap",
        "@crate//:diesel",
        "@crate//:futures",
        "@crate//:humantime",
        "@crate//:junit-parser",
        "@crate//:lazy_static",
        "@crate//:leptos",
        "@crate//:leptos_actix",
        "@crate//:leptos_dom",
        "@crate//:leptos_meta",
        "@crate//:leptos_router",
        "@crate//:log",
        "@crate//:prometheus-client",
        "@crate//:regex",
        "@crate//:serde",
        "@crate//:tikv-jemallocator",
        "@crate//:time",
        "@crate//:tokio",
        "@crate//:tokio-stream",
        "@crate//:tracing",
        "@crate//:tracing-actix-web",
        "@crate//:tracing-flame",
        "@crate//:tracing-subscriber",
        "@crate//:url",
        "@crate//:url-escape",
        "@crate//:wasm-bindgen",
        "@crate//:web-sys",
        "@crate//:zip",
        "@rules_rust//tools/runfiles",
    ],
)

rust_shared_library(
    name = "blade.wasm",
    srcs = [
        "lib.rs",
        "main.rs",
        "routes.rs",
        "darkmode.rs",
    ] + glob([
        "routes/**/*.rs",
        "components/**/*.rs",
    ]),
    crate_features = ["hydrate"],
    crate_name = "blade",
    rustc_env = {
        "SERVER_FN_OVERRIDE_KEY": "bazel",
    },
    tags = ["manual"],
    visibility = ["//visibility:public"],
    deps = [
        "//blade/state",
        "//blade/tailwindmerge",
        "@wasm_crate//:ansi-to-html",
        "@wasm_crate//:anyhow",
        "@wasm_crate//:cfg-if",
        "@wasm_crate//:console_error_panic_hook",
        "@wasm_crate//:console_log",
        "@wasm_crate//:futures",
        "@wasm_crate//:futures-util",
        "@wasm_crate//:gloo-file",
        "@wasm_crate//:gloo-net",
        "@wasm_crate//:humantime",
        "@wasm_crate//:junit-parser",
        "@wasm_crate//:leptos",
        "@wasm_crate//:leptos_dom",
        "@wasm_crate//:leptos_meta",
        "@wasm_crate//:leptos_router",
        "@wasm_crate//:log",
        "@wasm_crate//:serde",
        "@wasm_crate//:time",
        "@wasm_crate//:tracing",
        "@wasm_crate//:tracing-subscriber",
        "@wasm_crate//:tracing-web",
        "@wasm_crate//:url",
        "@wasm_crate//:url-escape",
        "@wasm_crate//:wasm-bindgen",
        "@wasm_crate//:web-sys",
        "@wasm_crate//:zip",
    ],
)

rust_test(
    name = "blade_test",
    size = "small",
    crate = ":blade",
    crate_features = ["ssr"],
)

runfiles(
    name = "blade_runfiles",
    binary = ":blade",
    root = "/app",
)

pkg_tar(
    name = "blade_tar",
    srcs = [":blade_runfiles"],
)

oci_image(
    name = "blade_image",
    base = "@distroless_base_linux_amd64",
    entrypoint = ["/app/blade/blade"],
    tags = ["noosx"],
    tars = [
        ":blade_tar",
        "@oci_base//:closure.tar",
    ],
    workdir = "/app/blade/blade.runfiles/blade",
)

oci_load(
    name = "blade_image_load",
    image = ":blade_image",
    repo_tags = ["ghcr.io/dolcetriade/blade:latest"],
    tags = ["noosx"],
)

genrule(
    name = "tags",
    outs = ["tags.txt"],
    cmd = """
        s=$$(cat bazel-out/stable-status.txt | grep BUILD_EMBED_LABEL | awk '{print $$2}')
        if [[ -n $$s ]]; then
            echo $$s > $@
        else
            echo 0.0.0 > $@
        fi
    """,
    stamp = 1,
)

oci_push(
    name = "blade_push",
    image = ":blade_image",
    remote_tags = ":tags",
    repository = "ghcr.io/dolcetriade/blade",
    tags = ["noosx"],
)

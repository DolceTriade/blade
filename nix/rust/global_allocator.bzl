"Rules for working with transitions."

load("@bazel_skylib//lib:paths.bzl", "paths")

def _transition_ga_impl(_, attr):
    return {
        "@rules_rust//rust/settings:experimental_use_global_allocator": True,
        "@rules_rust//rust/settings:experimental_use_cc_common_link": True,
    }

_transition_ga = transition(
    implementation = _transition_ga_impl,
    inputs = [],
    outputs = ["@rules_rust//rust/settings:experimental_use_global_allocator", "@rules_rust//rust/settings:experimental_use_cc_common_link"],
)

def _rust_global_allocator_binary_impl(ctx):
    # We need to forward the DefaultInfo provider from the underlying rule.
    # Unfortunately, we can't do this directly, because Bazel requires that the executable to run
    # is actually generated by this rule, so we need to symlink to it, and generate a synthetic
    # forwarding DefaultInfo.

    result = []

    # ctx.attr.binary is a singleton list if this rule uses an outgoing transition.
    if type(ctx.attr.binary) == type([]):
        binary = ctx.attr.binary[0]
    else:
        binary = ctx.attr.binary

    default_info = binary[DefaultInfo]
    files = default_info.files
    new_executable = None
    original_executable = default_info.files_to_run.executable
    runfiles = default_info.default_runfiles

    if not original_executable:
        fail("Cannot transition a 'binary' that is not executable")

    new_executable_name = ctx.attr.basename if ctx.attr.basename else original_executable.basename

    # In order for the symlink to have the same basename as the original
    # executable (important in the case of proto plugins), put it in a
    # subdirectory named after the label to prevent collisions.
    new_executable = ctx.actions.declare_file(paths.join(ctx.label.name, new_executable_name))
    ctx.actions.symlink(
        output = new_executable,
        target_file = original_executable,
        is_executable = True,
    )
    files = depset(direct = [new_executable], transitive = [files])
    runfiles = runfiles.merge(ctx.runfiles([new_executable]))

    result.append(
        DefaultInfo(
            files = files,
            runfiles = runfiles,
            executable = new_executable,
        ),
    )

    if RunEnvironmentInfo in binary:
        result.append(binary[RunEnvironmentInfo])

    return result

def _get_platform_transition_attrs(binary_cfg):
    return {
        "basename": attr.string(),
        "binary": attr.label(allow_files = True, cfg = binary_cfg),
        "_allowlist_function_transition": attr.label(
            default = "@bazel_tools//tools/allowlists/function_transition_allowlist",
        ),
    }

rust_global_allocator_binary = rule(
    implementation = _rust_global_allocator_binary_impl,
    # Use an outgoing transition since the target platform of the
    # platform_transition_binary doesn't matter and it results in a more
    # intuitive output path (matching an untransitioned binary).
    attrs = _get_platform_transition_attrs(binary_cfg = _transition_ga),
    executable = True,
    doc = "Transitions the binary to use the provided platform. Will forward RunEnvironmentInfo",
)

platform_transition_test = rule(
    implementation = _rust_global_allocator_binary_impl,
    attrs = _get_platform_transition_attrs(binary_cfg = "target"),
    # Use an incoming transition since the target platform of the
    # platform_transition_test does matter for the exec platform resolution of
    # the test action.
    cfg = _transition_ga,
    test = True,
    doc = "Transitions the test to use the provided platform. Will forward RunEnvironmentInfo",
)
